#pragma config(Motor,  port6,           drive,         tmotorVex269_MC29, openLoop)
#pragma config(Motor,  port3,           arm,           tmotorVex269_MC29, openLoop)
#pragma config(Motor,  port5,           armPivot,      tmotorVex269_MC29, openLoop)
#pragma config(Motor,  port8,           clawServoA,    tmotorServoContinuousRotation, openLoop, driveLeft)
#pragma config(Motor,  port9,           clawServoB,    tmotorServoContinuousRotation, openLoop, driveRight)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//int rotateCounterClockwise = vexRT[Btn7R];// sets the held/released value of Btn7R to the variable "rotateRight" //
//int rotateClockwise = vexRT[Btn7L];// sets the held/released value of Btn7L to the variable "rotateLeft" //

int armRotate = vexRT[Ch1]; // sets the speed and direction to rotate the arm to variable armRotate
int armExtension = vexRT[Ch2]; // set the speed and direction of the arm extension/retraction to variable armExtension

int driveVelocity = vexRT[Ch3]; // sets the drive motor direction and speed to channel 3

int joystickThreshold = 15; // variable that prevents accidental joystick bumps from moving the robot

int positiveMovementSpeed = 127; // positive movement speed variables 
int negativeMovementSpeed = -127; // negative movement speed variables

int highLowSwitch = 1; // variable used to switch motor speed from fast to slow and vice versa

task moveRobot() // Will move robot forward and backward with channel 3 movement
{
	while(true)// Program will constantly check for these events //
	{
		if (!(abs(driveVelocity) < joystickThreshold)) // to prevent accidental joystick bumps, when the joystick is moved enough, the motor starts
		{
			motor[drive] = driveVelocity;
		}
	}
}

task clawMove() // Will open and close each claw using buttons Btn8U, Btn8L, Btn8R, and Btn8D //
{
	while(true)
	{
		if(vexRT[Btn8U])// when Btn8U is pressed, clawServoA will open //
		{
			motor[clawServoA] = 100;
		}

		if(vexRT[Btn8L])// when Btn8L is pressed, clawServoA will close //
		{
			motor[clawServoA] = 0;
		}

		if(vexRT[Btn8R])// when Btn8R is pressed, clawServoB will open //
		{
			motor[clawServoB] = 0;
		}

		if(vexRT[Btn8D])// when Btn8D is pressed, clawServoB will close //
		{
			motor[clawServoB] = 100;
		}
	}
}

task armExtendRetract() // Moves arm forwards and backwards with channel 2 //
{
	while(true)// Program will constantly check for these events //
	{
		motor[arm] = armExtension;
		
		if (leftTriggerB)// while Btn5D is pressed, set motor "arm" speed to 127 //
		{
			motor[arm] = positiveMovementSpeed;
			wait1Msec(5000); // prevents the motor from stuttering
		}
		else// once Btn5D is released, the motor will stop //
		{
			stopMotor(arm);
		}

		if (rightTriggerB)// while Btn6D is pressed, set motor "arm" speed to -127 //
		{
			motor[arm] = negativeMovementSpeed;
			wait1Msec(5000); // prevents the motor from stuttering
		}
		else// once Btn6D is released, the motor will stop //
		{
			stopMotor(arm);
		}
	}
}

task armRotation() // Rotates arm platform with joystick channel 1
{
	while(true)
	{

		if (rotateClockwise)/* while Btn7R is pressed, the arm rotates clockwise (the arm rotates the opposite 
			direction as the motor because they are hooked up to two gears) */
		{
			motor[armPivot] = postiveMovementSpeed
			wait1Msec(5000); // prevents the motor from stuttering
		}
		else// once Btn7R is released, the motor will stop //
		{
			stopMotor(armPivot);
		}

		if (rotateCounterClockwise)/* while Btn7L is pressed, the arm rotates counterclockwise (the arm rotates the opposite 
			direction as the motor because they are hooked up to two gears) */
		{
			motor[armPivot] = negativeMovementSpeed;
			wait1Msec(5000); // prevents the motor from stuttering
		}
		else// once Btn7L is released, the motor will stop //
		{
			stopMotor(armPivot);
		}
	}
}

task speedChange()
{
	while (true)
	{
		if (vexRT[Btn8R] && highLowSwitch == 1)
		{
			positiveMovementSpeed = 63;
			negativeMovementSpeed = -63;
			highLowSwitch *= -1;
		}
		if (vexRT[Btn8R] && highLowSwitch == -1)
		{
			positiveMovementSpeed = 127;
			negativeMovementSpeed = -127;
			highLowSwitch *= -1;
		}
	}
}

task main()
{
	while(true)// run all tasks //
	{
		startTask(moveRobot);// task which moves robot forwards and backwards 
		startTask(clawMove);// task which opens and closes the claw 
		startTask(armExtendRetract);// task which moves the arm forwards and backwards 
		startTask(armRotation);// task which rotates the arm base 
		startTask(speedChange);// task which changes the speed of the motors
	}
}
